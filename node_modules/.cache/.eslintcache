[{"/Users/surbhi/Desktop/Insurance-cmp/src/index.tsx":"1","/Users/surbhi/Desktop/Insurance-cmp/src/reportWebVitals.ts":"2","/Users/surbhi/Desktop/Insurance-cmp/src/App.tsx":"3","/Users/surbhi/Desktop/Insurance-cmp/src/Insurer.web.tsx":"4","/Users/surbhi/Desktop/Insurance-cmp/src/Components/LabelWithIcon.tsx":"5","/Users/surbhi/Desktop/Insurance-cmp/src/Components/ConfirmationDialog.web.tsx":"6","/Users/surbhi/Desktop/Insurance-cmp/src/Components/Insurer/MedicalInsurance.web.tsx":"7","/Users/surbhi/Desktop/Insurance-cmp/src/Components/Insurer/InsurerOverview.web.tsx":"8","/Users/surbhi/Desktop/Insurance-cmp/src/Components/Insurer/UploadAttachedment.web.tsx":"9","/Users/surbhi/Desktop/Insurance-cmp/src/Components/Insurer/MotorInsurance.web.tsx":"10","/Users/surbhi/Desktop/Insurance-cmp/src/Components/Insurer/SiibCommissionRate.web.tsx":"11","/Users/surbhi/Desktop/Insurance-cmp/src/Components/Insurer/Contact.web.tsx":"12","/Users/surbhi/Desktop/Insurance-cmp/src/Components/MultiSelect.web.tsx":"13"},{"size":554,"mtime":1679662026000,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":1679662026000,"results":"16","hashOfConfig":"15"},{"size":2183,"mtime":1683010592078,"results":"17","hashOfConfig":"15"},{"size":60584,"mtime":1683025495979,"results":"18","hashOfConfig":"15"},{"size":1609,"mtime":1680263852000,"results":"19","hashOfConfig":"15"},{"size":2367,"mtime":1682576139000,"results":"20","hashOfConfig":"15"},{"size":5997,"mtime":1682577658000,"results":"21","hashOfConfig":"15"},{"size":25183,"mtime":1683010423664,"results":"22","hashOfConfig":"15"},{"size":13768,"mtime":1682591694000,"results":"23","hashOfConfig":"15"},{"size":17681,"mtime":1682577706000,"results":"24","hashOfConfig":"15"},{"size":5322,"mtime":1682577635000,"results":"25","hashOfConfig":"15"},{"size":9912,"mtime":1682577825000,"results":"26","hashOfConfig":"15"},{"size":1959,"mtime":1681105258000,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"ruhca9",{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"31"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"31"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"31"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"31"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"31"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"31"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"31"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"31"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"31"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"31"},"/Users/surbhi/Desktop/Insurance-cmp/src/index.tsx",[],[],[],"/Users/surbhi/Desktop/Insurance-cmp/src/reportWebVitals.ts",[],[],"/Users/surbhi/Desktop/Insurance-cmp/src/App.tsx",["78","79","80","81","82","83","84","85","86","87"],[],"import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Kishanpal from './Components/Insurer/Kishanpal'\nimport InsurerOverview from './Components/Insurer/InsurerOverview.web'\nimport SiibCommissionRate from './Components/Insurer/SiibCommissionRate.web'\nimport MedicalInsurance from './Components/Insurer/MedicalInsurance.web'\nimport MotorInsurance from './Components/Insurer/MotorInsurance.web'\nimport Contact from './Components/Insurer/Contact.web'\nimport UploadAttachedment from './Components/Insurer/UploadAttachedment.web'\nimport Insurer from './Insurer.web'\n\nconst enumFormAction = {\n  ADD: 'ADD',\n  EDIT: 'EDIT',\n  VIEW: 'VIEW',\n}\n\nfunction App() {\n  const [inssuranceData, setInssuranceData] = useState<string[] | null>(null)\n  const [insurerFormType, setInsurerFormType] = useState<string>(enumFormAction.EDIT)\n\n  const insuranceTypesData = (data: string[] | null) => {\n    setInssuranceData(data)\n  }\n\n  const changeEdit = () => {\n    console.log('insurerFormType :', insurerFormType)\n    setInsurerFormType(enumFormAction.EDIT)\n  }\n\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n      <Insurer formType={insurerFormType} changeEdit={changeEdit} />\n      {/* <div style={{ padding: '30px' }}>\n        <InsurerOverview insuranceTypes={insuranceTypesData} />\n      </div>\n      <div style={{ padding: '30px' }}>\n        <SiibCommissionRate insuranceInputs={inssuranceData} />\n      </div>\n      <div style={{ padding: '30px' }}>\n        <MedicalInsurance />\n      </div>\n      <div style={{ padding: '30px' }}>\n        <MotorInsurance />\n      </div>\n      <div style={{ padding: '30px' }}>\n        <Contact />\n      </div>\n      <div style={{ padding: '30px' }}>\n        <UploadAttachedment />\n      </div> */}\n    </div>\n  );\n}\n\nexport default App;\n","/Users/surbhi/Desktop/Insurance-cmp/src/Insurer.web.tsx",["88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116"],[],"/Users/surbhi/Desktop/Insurance-cmp/src/Components/LabelWithIcon.tsx",["117"],[],"import React from 'react';\nimport { InfoRounded } from '@material-ui/icons';\nimport { makeStyles, createStyles, useTheme, withStyles, createTheme } from '@material-ui/core/styles';\nimport { Tooltip } from '@material-ui/core';\n\ninterface LabelWithIconProps {\n  label: string,\n  tooltip?: string\n}\n\nconst LabelWithIcon = (props: LabelWithIconProps) => {\n\n  const theme = createTheme({\n    palette: {\n      primary: {\n        main: \"#0000ff\",\n        contrastText: \"#fff\",\n      },\n    },\n  });\n\n  const CustomToolTip = withStyles({\n    arrow: {\n      \"&::before\": {\n        color: \"white\"\n      }\n    },\n    tooltip: {\n      backgroundColor: \"#f5f5f9\",\n      boxShadow: theme.shadows[8],\n      color: \"rgba(0, 0, 0, 0.87)\",\n      fontSize: 14,\n      maxWidth: 800\n    },\n    tooltipPlacementTop: {\n      margin: \"4px 0\"\n    }\n  })(Tooltip);\n\n  const classes = useStyles();\n  return (\n    <React.Fragment>\n      <label className={classes.labelStyle} aria-controls=\"cutomerName\" >{props.label}\n        {props.tooltip ? (\n          // @ts-ignore\n          <CustomToolTip title={props.tooltip} placement=\"top-start\" arrow>\n            <InfoRounded className={classes.iconStyle} />\n          </CustomToolTip>\n        ) : (\n          <InfoRounded className={classes.iconStyle} />\n        )}\n      </label>\n      {/* <br /> */}\n    </React.Fragment>\n  )\n}\n\nconst useStyles = makeStyles(theme =>\n  createStyles({\n    labelStyle: {\n      display: 'flex',\n      fontSize: '14px'\n    },\n    iconStyle: {\n      fontSize: \"20px\",\n      paddingLeft: \"5px\",\n      paddingBottom:\"5px\"\n    }\n  })\n)\n\nexport default LabelWithIcon","/Users/surbhi/Desktop/Insurance-cmp/src/Components/ConfirmationDialog.web.tsx",["118","119","120"],[],"import React, {useState} from 'react'\r\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button, makeStyles } from '@material-ui/core'\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    dialogWrapper:{\r\n        \"& [role='dialog']\":{\r\n            padding: '30px',\r\n            borderRadius: '16px',\r\n        }\r\n    },\r\n    headingStyle: {\r\n        textAlign: 'center',\r\n        '& h2': {\r\n            fontWeight: 700,\r\n        }\r\n    },\r\n    paraStyle:{\r\n        textAlign: 'center',\r\n    },\r\n    btnWrapper:{\r\n        justifyContent: 'center',\r\n        '& button': {\r\n            padding: '15px 0px',\r\n            width: '150px',\r\n            borderColor: '#3b8da2',\r\n            borderRadius: '15px',\r\n        }\r\n    },\r\n})\r\n\r\ntype ConfirmationDialogProps = {\r\n    openDialog:boolean,\r\n    headingText: string,\r\n    paragraphText: string,\r\n    btnCancelText: string,\r\n    btnOkText: string,\r\n    handleOk: () => void;\r\n    handleCancel: () => void;\r\n}\r\n\r\nconst ConfirmationDialog = (props:ConfirmationDialogProps) => {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n      setOpen(true);\r\n    };\r\n  \r\n    const handleClose = () => {\r\n      setOpen(false);\r\n    };\r\n\r\n  return (\r\n    <>\r\n        \r\n      <Dialog\r\n        open={props?.openDialog}\r\n        onClose={props?.handleCancel}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n        className={classes.dialogWrapper}\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\" className={classes.headingStyle}>{props?.headingText}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\"  className={classes.paraStyle}>\r\n            {props?.paragraphText}\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions className={classes.btnWrapper}>\r\n          <Button variant=\"outlined\" style={{color: '#3b8da2',}} onClick={props?.handleCancel} color=\"primary\">\r\n            {props.btnCancelText}\r\n          </Button>\r\n          <Button variant=\"outlined\" style={{backgroundColor: '#3b8da2', color: '#fff',}} onClick={props?.handleOk} color=\"primary\" autoFocus>\r\n          {props.btnOkText}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ConfirmationDialog","/Users/surbhi/Desktop/Insurance-cmp/src/Components/Insurer/MedicalInsurance.web.tsx",["121","122","123","124"],[],"import React, { useEffect, useRef, useState } from 'react'\r\nimport { FormLabel, Grid, makeStyles, TextField } from '@material-ui/core'\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport LabelWithIcon from '../LabelWithIcon'\r\n\r\nconst useStyles = makeStyles({\r\n    cmpWrapper: {\r\n        backgroundColor: '#fff',\r\n        padding: '30px',\r\n        '& legend': {\r\n            textAlign: 'left',\r\n            marginBottom: '10px',\r\n            display: 'flex',\r\n            fontSize: '14px',\r\n            // color: '#d0d0d0',\r\n            color: '#3d3d3d',\r\n            '& svg': {\r\n                fontSize: '15px',\r\n                color: '#222',\r\n                marginLeft: '6px',\r\n            }\r\n        }\r\n    },\r\n    classBenefits: {\r\n        width: '60%',\r\n        display: 'block'\r\n    }\r\n})\r\n\r\nconst enumFormAction = {\r\n    ADD: 'ADD',\r\n    EDIT: 'EDIT',\r\n    VIEW: 'VIEW',\r\n}\r\n\r\ntype medicalInsuranceDataType = {\r\n    insurance_class: string,\r\n    class_benefits: string,\r\n}\r\n\r\ntype MedicalInsuranceType = {\r\n    addInsuranceClassData: (data: string) => void,\r\n    addClassBenefitsData: (data: string) => void,\r\n    data: medicalInsuranceDataType,\r\n    submitEvent: boolean,\r\n    formType: string,\r\n}\r\n\r\n\r\n\r\nconst MedicalInsurance = (props: MedicalInsuranceType) => {\r\n    const classes = useStyles(); \r\n    const [count, setCount] = useState(0)\r\n    const [errors, setErrors] = useState({\r\n        insuranceClass: false,\r\n        classBenefits: false,\r\n    })\r\n\r\n    useEffect(() => {\r\n        setCount(count+1)\r\n        if (count) {\r\n            const temp = { ...errors };\r\n            if (props?.data?.insurance_class === '') {\r\n                temp['insuranceClass'] = true;\r\n            }\r\n            if (props?.data?.class_benefits === '') {\r\n                temp['classBenefits'] = true;\r\n            }\r\n            setErrors(temp)\r\n        }\r\n    }, [props.submitEvent])\r\n\r\n\r\n    return (\r\n        <div className={classes.cmpWrapper}>\r\n\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={12} sm={4}>\r\n                        <LabelWithIcon label={'Insurance Class'} />\r\n                    <TextField\r\n                        id=\"outlined-basic\"\r\n                        label=\"\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        name=\"insuranceClass\"\r\n                        placeholder='VVIP'\r\n                        onChange={(e: any) => {\r\n                            props.addInsuranceClassData(e.target.value)\r\n                            if (props?.data?.insurance_class === '') {\r\n                                const temp = { ...errors };\r\n                                temp['insuranceClass'] = true;\r\n                                setErrors(temp)\r\n                            } else {\r\n                                const temp = { ...errors };\r\n                                temp['insuranceClass'] = false;\r\n                                setErrors(temp)\r\n                            }\r\n                        }}\r\n                        // onBlur={(e: any) => {\r\n                        //     // props.insuranceUpdate(props.data?.label, e.target.value)\r\n                        //     // setInputData(e.target.value)\r\n                        // }}\r\n                        value={props?.data?.insurance_class}\r\n                        error={errors['insuranceClass']}\r\n                        //   helperText={formik.touched.iban && formik.errors.iban}\r\n                        size='small'\r\n                        required\r\n                        InputProps={{\r\n                         readOnly: props.formType === enumFormAction.EDIT || props.formType === enumFormAction.ADD ? false : true,\r\n                        }}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={8}>\r\n                        <LabelWithIcon label={'Class Benefits'} />\r\n                    <TextField\r\n                        id=\"outlined-basic\"\r\n                        label=\"\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        name=\"classBenefits\"\r\n                        placeholder=\"-Network name VVIP&\r\n                        -Max limit SAR 500,000\r\n                        -out patient 20% MAX 75\r\n                        -Room REG SUIT \r\n                        -Dental SAR 2,000\r\n                        -Optical SAR 400\r\n                        -Matenity SAR 15,000\"\r\n                        className={classes.classBenefits}\r\n                        onChange={(e: any) => {\r\n                            props.addClassBenefitsData(e.target.value)\r\n\r\n                            if (props?.data?.class_benefits === '') {\r\n                                const temp = { ...errors };\r\n                                temp['classBenefits'] = true;\r\n                                setErrors(temp)\r\n                            } else {\r\n                                const temp = { ...errors };\r\n                                temp['classBenefits'] = false;\r\n                                setErrors(temp)\r\n                            }\r\n                        }}\r\n                        value={props?.data?.class_benefits}\r\n                        error={errors['classBenefits']}\r\n                        // onBlur={(e: any) => {\r\n                        //     // props.insuranceUpdate(props.data?.label, e.target.value)\r\n                        //     // setInputData(e.target.value)\r\n                        // }}\r\n                        size='small'\r\n                        multiline\r\n                        required\r\n                        rows={7}\r\n                        InputProps={{\r\n                         readOnly: props.formType === enumFormAction.EDIT || props.formType === enumFormAction.ADD ? false : true,\r\n                        }}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MedicalInsurance","/Users/surbhi/Desktop/Insurance-cmp/src/Components/Insurer/InsurerOverview.web.tsx",["125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141"],[],"import React, { useEffect, useRef, useState } from 'react'\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl, FormHelperText, FormLabel, Grid, InputLabel, MenuItem, TextField } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport { Formik, useFormik, Form, Field, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Select from 'react-select';\r\nimport LabelWithIcon from '../LabelWithIcon'\r\nimport MultiSelect from '../MultiSelect.web'\r\n\r\nconst useStyles = makeStyles({\r\n    formWrapper: {\r\n        backgroundColor: '#fff',\r\n        padding: '30px',\r\n        width: '100%',\r\n        '& legend': {\r\n            textAlign: 'left',\r\n            marginBottom: '10px',\r\n            display: 'flex',\r\n            fontSize: '14px',\r\n            // color: '#d0d0d0',\r\n            color: '#3d3d3d',\r\n            '& svg': {\r\n                fontSize: '15px',\r\n                color: '#222',\r\n                marginLeft: '6px',\r\n            }\r\n        },\r\n        '& label':{\r\n            color: '#3d3d3d !important',\r\n        }\r\n    },\r\n    selectStyle: {\r\n        '& .css-3w2yfm-ValueContainer > div': {\r\n            backgroundColor: '#cbdeec',\r\n        },\r\n        '& .css-3w2yfm-ValueContainer > div:last-child': {\r\n            backgroundColor: '#fff',\r\n        }\r\n    },\r\n    selectError: {\r\n        '& > div': {\r\n            // height: '56px',\r\n            borderColor: 'red',\r\n            backgroundColor: '#fff',\r\n        }\r\n    },\r\n    lineSaprator: {\r\n        backgroundColor: '#e2e2e2',\r\n        height: '1.3px',\r\n        width: '100%',\r\n        margin: '18px 0px'\r\n    },\r\n    submitBtn: {\r\n        height: 'max-content',\r\n        backgroundColor: '#45a3ad',\r\n        textTransform: 'capitalize',\r\n        '&:hover':{\r\n            backgroundColor: '#45a3ad',\r\n        }\r\n    },\r\n    dialogTitle:{\r\n        textAlign: 'center',\r\n        '& > h2':{\r\n            fontWeight: '700',\r\n        }\r\n    },\r\n    dialogBtnWrapper:{\r\n        justifyContent: 'center',\r\n        marginBottom: '15px',\r\n        '@media(min-width: 500px)':{\r\n            '& button': {\r\n                padding: '12px 78px',\r\n            }\r\n        },\r\n    },\r\n    dialogBtnCancel:{\r\n        color: 'rgb(0 0 0 / 54%)',\r\n        textTransform: 'capitalize',\r\n    },\r\n    dialogBtnSave:{\r\n        backgroundColor: '#45a3ad',\r\n        textTransform: 'capitalize',\r\n        borderColor: '#45a3ad',\r\n        color: '#fff',\r\n        \"&:hover\":{\r\n            backgroundColor: '#45a3ad',\r\n        }\r\n    },\r\n    selectRemoveicon:{\r\n        '& [role=\"button\"]':{\r\n            display: 'none'\r\n        }\r\n    }\r\n});\r\n\r\nconst enumSegment = {\r\n\r\n}\r\n\r\nconst segmentDefaultValues = ['Mega KA', 'Corporate', 'SME', 'Government']\r\nconst typesOfInsuranceDefaultValues = ['Medical', 'Motor', 'Life', 'Engineering', 'Marine', 'Property', 'Fire', 'Aviation', 'Energy', 'protection and savings', 'General Bussiness']\r\n\r\nconst segmentOptions: any = [\r\n    { value: 'Mega KA', label: 'Mega KA' },\r\n    { value: 'Corporate', label: 'Corporate' },\r\n    { value: 'SME', label: 'SME' },\r\n    { value: 'Government', label: 'Government' },\r\n];\r\n\r\nconst typesOfInsuranceOptions: any = [\r\n    { value: 'Medical', label: 'Medical' },\r\n    { value: 'Motor', label: 'Motor' },\r\n    { value: 'Energy', label: 'Energy' },\r\n    { value: 'Life', label: 'Life' },\r\n    { value: 'Engineering', label: 'Engineering' },\r\n    { value: 'Marine', label: 'Marine' },\r\n    { value: 'Property', label: 'Property' },\r\n    { value: 'Fire', label: 'Fire' },\r\n    { value: 'Aviation', label: 'Aviation' },\r\n    { value: 'protection and saving', label: 'protection and saving' },\r\n    { value: 'General Bussiness', label: 'General Bussiness' },\r\n]\r\n\r\nconst enumFormAction = {\r\n    ADD: 'ADD',\r\n    EDIT: 'EDIT',\r\n    VIEW: 'VIEW',\r\n}\r\n\r\n\r\ntype InsurerOverviewProps = {\r\n    insuranceTypes: (data: string[] | null) => void,\r\n    data:any,\r\n    formType: string,\r\n    // editSegmentValues: any,\r\n    // editTypesOfInsuranceValues:any,\r\n}\r\n\r\nconst InsurerOverview = (props: InsurerOverviewProps) => {\r\n    const classes = useStyles();\r\n    const [segment, setSegment] = useState<string[] | null>(null);\r\n    const [segmentDefaultOptions, setSegmentDefaultOptions] = useState(segmentOptions)\r\n    // const [segmentValues, setSegmentValues] = useState<string[] | null>(null)\r\n    const [types_of_insurance, setTypes_of_insurance] = useState<string[] | null>(null);\r\n    // const [typesOfInsuranceValues, setTypesOfInsuranceValues] = useState<string[] | null>(null);\r\n    const [typesOfInsuranceDefaultOptions, setTypesOfInsuranceDefaultOptions] = useState(typesOfInsuranceOptions)\r\n    // const [selectedOptions, setSelectedOptions] = useState([]);\r\n    const [selectDisable, setSelectDisable] = useState(false)\r\n    const [showErrorSegment, setShowErrorSegment] = useState(false)\r\n    const [showErrorTypesOfInsurance, setShowErrorTypesOfInsurance] = useState(false)\r\n    const [open, setOpen] = useState(false);\r\n    const [formValues, setFormValues] = useState<any>(null)\r\n    let stopMount = useRef(false);\r\n\r\n    const initialValues = {\r\n        // insurer_id: \"\",\r\n        legal_name: \"\",\r\n        short_name: '',\r\n        address: '',\r\n        vat_number: null,\r\n        bank_name: '',\r\n        swift_code: null,\r\n        account_number: '',\r\n        iban: null,\r\n    }\r\n\r\n     \r\n    useEffect(() => {\r\n        console.log(\"insurer Data :\", props?.data)\r\n        if(props.formType !== enumFormAction.ADD){\r\n            // if(props?.data !== null){\r\n            //     console.log(\"props?.data['segment']:\", props?.data['segment'])\r\n            //      setSegment(props?.data['segment'])\r\n            //      setTypes_of_insurance(props?.data['types_of_insurance'])\r\n            // }\r\n        }\r\n    }, [props?.data, props.formType])\r\n      \r\n    useEffect(() => {\r\n        if(stopMount.current){\r\n            const finalValues:any = {...formValues}\r\n            console.log(\"formValues :\", formValues)\r\n            // if(segment !== null || types_of_insurance !== null){\r\n                finalValues['types_of_insurance'] = types_of_insurance !== null ? types_of_insurance : props?.data?.types_of_insurance ;\r\n                finalValues['segment'] = segment !== null ? segment : props?.data?.segment;\r\n                props.insuranceTypes(finalValues)\r\n            // }\r\n        }\r\n    }, [segment, types_of_insurance])\r\n\r\n\r\n    const validate = Yup.object().shape({\r\n        // insurer_id: Yup.string().trim().typeError('Required').required(\"Category is required.\"),\r\n        legal_name: Yup.string().trim().typeError('Required').min(2, \"Must be more then one character\").max(40, \"Must be 40 characters or less\").required(\"This field is required.\"),\r\n        short_name: Yup.string().trim().typeError('Required').min(2, \"Must be more then one character\").max(20, \"Must be 40 characters or less\").required(\"This field is required.\"),\r\n        address: Yup.string().trim().typeError('Required').min(2, \"Must be more then one character\").max(100, \"Must be 100 characters or less\").required(\"This field is required.\"),\r\n        vat_number: Yup.number().typeError('This field is required.').test('len', 'Must be exactly 10 characters', (val: any) => val.toString().length === 10).required(\"This field is required.\"),\r\n        bank_name: Yup.string().trim().typeError('Required').min(2, \"Must be more then one character\").max(40, \"Must be 40 characters or less\").required(\"This field is required.\"),\r\n        swift_code: Yup.number().typeError('This field is required.').test('len', 'Must be exactly 10 characters', (val: any) => val.toString().length === 10).required(\"This field is required.\"),\r\n        account_number: Yup.number().typeError('This field is required.').test('len', 'Must be exactly 13 characters', (val: any) => val.toString().length === 13).required(\"This field is required.\"),\r\n        iban: Yup.number().typeError('This field is required.').test('len', 'Must be exactly 10 characters', (val: any) => val.toString().length === 10).required(\"This field is required.\"),\r\n    })\r\n\r\n    //   console.log(\"useFormik()\", useFormik({\r\n    //     initialValues: initialValues,\r\n    //     // validationSchema: validate,\r\n    //     // validate: validate,\r\n    //     // isInitialValid: initialValues,\r\n    //     // initialIsValid:initialIsValid ,\r\n    //     onSubmit: (values) => {\r\n    //     },\r\n    //   }))\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: props.data ? props.data : initialValues,\r\n        validationSchema: validate,\r\n        // isInitialValid: initialValues,\r\n        // initialIsValid:initialIsValid ,\r\n        onSubmit: (values) => {\r\n            // alert(JSON.stringify(values, null, 2));\r\n            // debugger\r\n            const finalValues:any = {...values}\r\n            console.log(\"values :\", values)\r\n            if(segment !== null && types_of_insurance !== null && values){\r\n                finalValues['segment'] = segment;\r\n                finalValues['types_of_insurance'] = types_of_insurance;\r\n                setFormValues(finalValues)\r\n                setOpen(true);\r\n            }\r\n        },\r\n    });\r\n\r\n\r\n    \r\n\r\n    const handleTypesOfInsurance = (selected: any) => {\r\n        // const item = (e.target as HTMLInputElement).value\r\n        // const newState: string[] | null = typesOfInsuranceValues\r\n        // setTypesOfInsuranceValues((current:any) => [...current, item] )\r\n        setTypes_of_insurance(selected,);\r\n        setShowErrorTypesOfInsurance(false)\r\n        stopMount.current = true \r\n    }\r\n\r\n    const handleSegment = (selected: any) => {\r\n        // setSegmentValues((e.target as HTMLInputElement).value)\r\n        setSegment(selected);\r\n        setShowErrorSegment(false)\r\n        stopMount.current = true \r\n    }\r\n\r\n    // const handleSelectChange = (selected:any) => {\r\n    //   setSelectedOptions(selected);\r\n    // };\r\n\r\n\r\n    const handleCancel = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleSave = () => {\r\n        setSelectDisable(!selectDisable)\r\n        setOpen(false);\r\n        // props.insuranceTypes(types_of_insurance)\r\n        props.insuranceTypes(formValues)\r\n    }\r\n\r\n    const handelSubmitFun = () => {\r\n        console.log(\"kp\", formik.values.iban)\r\n        if (segment === null) {\r\n            setShowErrorSegment(true)\r\n        }\r\n        if (types_of_insurance === null) {\r\n            setShowErrorTypesOfInsurance(true)\r\n        }\r\n        // if(segment !== null && types_of_insurance !== null && formik.values.iban !== null && formik.values.swift_code !== null && formik.values.vat_number !== null && formik.values.legal_name !== \"\" && formik.values.short_name !== \"\" && formik.values.address !== \"\" && formik.values.bank_name !== \"\" && formik.values.account_number !== ''){\r\n            \r\n        // }\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            <form onSubmit={formik.handleSubmit} className={classes.formWrapper}>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12} sm={4}>\r\n                        {/* <label htmlFor=\"Insurer_Id\">Insurer Id</label> */}\r\n                        {/* <FormLabel component=\"legend\">Insurer Id <ErrorIcon /></FormLabel> */}\r\n                        <LabelWithIcon label={'Insurer Id'} />\r\n                        <TextField\r\n                            id=\"outlined-basic\"\r\n                            label=\"\"\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            name='insurer_id'\r\n                            value='C-000001'\r\n                            size='small'\r\n                        // value={formik.values.insurer_id}\r\n                        //     onChange={formik.handleChange}\r\n                        //   error={formik.touched.insurer_id && Boolean(formik.errors.insurer_id)}\r\n                        //   helperText={formik.touched.insurer_id && formik.errors.insurer_id}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={4}>\r\n                        <LabelWithIcon label={'Legal name'} />\r\n                        <TextField\r\n                            id=\"outlined-basic\"\r\n                            label=\"\"\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            name='legal_name'\r\n                            value={formik.values.legal_name}\r\n                            onChange={formik.handleChange}\r\n                            error={formik.touched.legal_name && Boolean(formik.errors.legal_name)}\r\n                            helperText={formik.touched.legal_name && formik.errors.legal_name === \"\"}\r\n                            size='small'\r\n                            inputProps={\r\n                                { readOnly: props.formType === enumFormAction.EDIT || props.formType === enumFormAction.ADD ? false : true, }\r\n                            }\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={4}>\r\n                        <LabelWithIcon label={'Short name'} />\r\n                        <TextField\r\n                            id=\"outlined-basic\"\r\n                            label=\"\"\r\n                            variant=\"outlined\"\r\n                            name='short_name'\r\n                            fullWidth\r\n                            value={formik.values.short_name}\r\n                            onChange={formik.handleChange}\r\n                            error={formik.touched.short_name && Boolean(formik.errors.short_name)}\r\n                            helperText={formik.touched.short_name && formik.errors.short_name === \"\"}\r\n                            size='small'\r\n                            inputProps={\r\n                                { readOnly: props.formType === enumFormAction.EDIT || props.formType === enumFormAction.ADD ? false : true, }\r\n                            }\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12} sm={8}>\r\n                        <LabelWithIcon label={'Address'} />\r\n                        <TextField\r\n                            id=\"outlined-basic\"\r\n                            label=\"\"\r\n                            variant=\"outlined\"\r\n                            name='address'\r\n                            fullWidth\r\n                            value={formik.values.address}\r\n                            onChange={formik.handleChange}\r\n                            error={formik.touched.address && Boolean(formik.errors.address)}\r\n                            helperText={formik.touched.address && formik.errors.address === \"\"}\r\n                            size='small'\r\n                            inputProps={\r\n                                { readOnly: props.formType === enumFormAction.EDIT || props.formType === enumFormAction.ADD ? false : true, }\r\n                            }\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={4}>\r\n                        <LabelWithIcon label={'VAT number'} />\r\n                        <TextField\r\n                            id=\"outlined-basic\"\r\n                            label=\"\"\r\n                            variant=\"outlined\"\r\n                            name='vat_number'\r\n                            fullWidth\r\n                            value={formik.values.vat_number}\r\n                            onChange={formik.handleChange}\r\n                            error={formik.touched.vat_number && Boolean(formik.errors.vat_number)}\r\n                            helperText={formik.touched.vat_number && formik.errors.vat_number === \"\"}\r\n                            size='small'\r\n                            inputProps={\r\n                                { readOnly: props.formType === enumFormAction.EDIT || props.formType === enumFormAction.ADD ? false : true, }\r\n                            }\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <div className={classes.lineSaprator}></div>\r\n\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12} sm={4}>\r\n                        <LabelWithIcon label={'Bank name'} />\r\n                        <TextField\r\n                            id=\"outlined-basic\"\r\n                            label=\"\"\r\n                            variant=\"outlined\"\r\n                            name='bank_name'\r\n                            fullWidth\r\n                            value={formik.values.bank_name}\r\n                            onChange={formik.handleChange}\r\n                            error={formik.touched.bank_name && Boolean(formik.errors.bank_name)}\r\n                            helperText={formik.touched.bank_name && formik.errors.bank_name === \"\"}\r\n                            size='small'\r\n                            inputProps={\r\n                                { readOnly: props.formType === enumFormAction.EDIT || props.formType === enumFormAction.ADD ? false : true, }\r\n                            }\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={4}>\r\n                        <LabelWithIcon label={'Swift code'} />\r\n                        <TextField\r\n                            id=\"outlined-basic\"\r\n                            label=\"\"\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            name='swift_code'\r\n                            value={formik.values.swift_code}\r\n                            onChange={formik.handleChange}\r\n                            error={formik.touched.swift_code && Boolean(formik.errors.swift_code)}\r\n                            helperText={formik.touched.swift_code && formik.errors.swift_code === \"\"}\r\n                            size='small'\r\n                            inputProps={\r\n                                { readOnly: props.formType === enumFormAction.EDIT || props.formType === enumFormAction.ADD ? false : true, }\r\n                            }\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={4}>\r\n                        <LabelWithIcon label={'Account number'} />\r\n                        <TextField\r\n                            id=\"outlined-basic\"\r\n                            label=\"\"\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            name='account_number'\r\n                            value={formik.values.account_number}\r\n                            onChange={formik.handleChange}\r\n                            error={formik.touched.account_number && Boolean(formik.errors.account_number)}\r\n                            helperText={formik.touched.account_number && formik.errors.account_number === \"\"}\r\n                            size='small'\r\n                            inputProps={\r\n                                { readOnly: props.formType === enumFormAction.EDIT || props.formType === enumFormAction.ADD ? false : true, }\r\n                            }\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12} sm={4}>\r\n                        <LabelWithIcon label={'IBAN'} />\r\n                        <TextField\r\n                            id=\"outlined-basic\"\r\n                            label=\"\"\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            name='iban'\r\n                            value={formik.values.iban}\r\n                            onChange={formik.handleChange}\r\n                            error={formik.touched.iban && Boolean(formik.errors.iban)}\r\n                            helperText={formik.touched.iban && formik.errors.iban === \"\"}\r\n                            size='small'\r\n                            inputProps={\r\n                                { readOnly: props.formType === enumFormAction.EDIT || props.formType === enumFormAction.ADD ? false : true, }\r\n                            }\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <div className={classes.lineSaprator}></div>\r\n\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12} sm={12}>\r\n                        {/* <LabelWithIcon label={'Segment'} />\r\n                        <Select\r\n                            isMulti\r\n                            options={segmentDefaultOptions}\r\n                            value={segment}\r\n                            onChange={handleSegment}\r\n                            name='segment'\r\n                            isDisabled={selectDisable}\r\n                            className={`${classes.selectStyle} ${showErrorSegment ? classes.selectError : ''}`}\r\n                        // components={{ DropdownIndicator:() => null, IndicatorSeparator:() => null }}\r\n                        // isClearable={true}\r\n                        // value={formik.values.segment}\r\n                        // onChange={formik.handleChange}\r\n                        // error={formik.touched.segment && Boolean(formik.errors.segment)}\r\n                        // helperText={formik.touched.segment && formik.errors.segment}\r\n                        />\r\n                        {\r\n                            showErrorSegment ? (<FormHelperText component=\"div\" style={{ flexGrow: 1, color: '#ff1943', }}>This field is required.</FormHelperText>) : null\r\n                        } */} \r\n                        \r\n                        <LabelWithIcon label='Segment' />\r\n                        <MultiSelect\r\n                         selectOptions={segmentDefaultOptions}\r\n                        //  selectValue={props.formType === enumFormAction.EDIT ? props?.data?.segment : segment}\r\n                         eventHandler={handleSegment}\r\n                        //  selectValue={props?.data?.segment}\r\n                         selectValue={props?.data?.segment}\r\n                         disable={props.formType === enumFormAction.VIEW ? true : false }\r\n                         showError={showErrorSegment ? true : false }\r\n                         />\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <div className={classes.lineSaprator}></div>\r\n\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12} sm={12} style={{ display: 'flex', alignItems: `${showErrorTypesOfInsurance ? 'center' : 'end'}` }}>\r\n                        <div style={{ width: '100%', marginRight: '15px' }}>\r\n                        <LabelWithIcon label='Types(s) of Insurance' />\r\n                         <MultiSelect\r\n                         selectOptions={typesOfInsuranceDefaultOptions}\r\n                        //  selectValue={types_of_insurance}\r\n                         selectValue={props?.data?.types_of_insurance}\r\n                         eventHandler={handleTypesOfInsurance}\r\n                         disable={props.formType !== enumFormAction.ADD || selectDisable}\r\n                         showError={showErrorTypesOfInsurance ? true : false }\r\n                         />\r\n                        </div>\r\n                        {\r\n                            (!selectDisable && props.formType === enumFormAction.ADD) && (\r\n                        <Button className={classes.submitBtn} onClick={handelSubmitFun} variant=\"contained\" color=\"primary\" type='submit'>\r\n                            save\r\n                        </Button>\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n\r\n\r\n            <Dialog\r\n                open={open}\r\n                // onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n                maxWidth=\"xs\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\" className={classes.dialogTitle}>{\"Save insurance type\"}</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\" >\r\n                        Are you sure you want to proceed with the selected insurance type(s)? Once set, this cannot be changeed.\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions className={classes.dialogBtnWrapper}>\r\n                    <Button className={classes.dialogBtnCancel}  variant=\"outlined\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button className={classes.dialogBtnSave}  variant=\"outlined\" onClick={handleSave} autoFocus>\r\n                        Save\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default InsurerOverview","/Users/surbhi/Desktop/Insurance-cmp/src/Components/Insurer/UploadAttachedment.web.tsx",["142","143","144","145"],[],"import React, { useState } from 'react'\r\nimport { makeStyles, Grid, FormLabel, TextField, InputAdornment } from '@material-ui/core';\r\nimport imageCompression from 'browser-image-compression';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport InsertDriveFileIcon from '@material-ui/icons/InsertDriveFile';\r\nimport LabelWithIcon from '../LabelWithIcon'\r\nimport ConfirmationDialog from '../ConfirmationDialog.web';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    cmpWrapper: {\r\n        backgroundColor: '#fff',\r\n        padding: '30px',\r\n        '& legend': {\r\n            textAlign: 'left',\r\n            marginBottom: '10px',\r\n            display: 'flex',\r\n            fontSize: '14px',\r\n            // color: '#d0d0d0',\r\n            color: '#3d3d3d',\r\n            '& svg': {\r\n                fontSize: '15px',\r\n                color: '#222',\r\n                marginLeft: '6px',\r\n            }\r\n        }\r\n    },\r\n    uploadedDoc: {\r\n        '& input': {\r\n            color: '#7f7f7f'\r\n        }\r\n        // style={{color: '#7f7f7f'}}\r\n    },\r\n    classBenefits: {\r\n        width: '60%',\r\n        display: 'block'\r\n    },\r\n    inputFile: {\r\n        // '& input[type=\"file\"]::file-selector-button':{\r\n        //     display: 'none',\r\n        // },\r\n        color: '#7f7f7f',\r\n        '& fieldset': {\r\n            border: '1px dashed rgba(0, 0, 0, 0.23) !important'\r\n        },\r\n        '& > div': {\r\n            height: '40px',\r\n            overflow: 'hidden',\r\n        },\r\n        '& input': {\r\n            opacity: '0',\r\n            position: 'absolute',\r\n            left: '0px',\r\n            right: '0px',\r\n            maxWidth: '75%',\r\n        },\r\n        '& .MuiInputAdornment-positionEnd': {\r\n            marginLeft: 'auto',\r\n            position: 'absolute',\r\n            right: '0px',\r\n            '& > *': {\r\n                background: '#fff',\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nconst enumUploadAttachedment = {\r\n    name: 'name',\r\n    comment: 'comment',\r\n}\r\n\r\ntype documentUploadType = {\r\n    name: string,\r\n    comment: string,\r\n    insurance_document: any,\r\n}\r\n\r\n\r\ntype UploadAttachedmentProps = {\r\n    data: documentUploadType,\r\n    eventChange: any,\r\n    formType: string,\r\n    removeDoc: () => void,\r\n}\r\n\r\nconst enumFormAction = {\r\n    ADD: 'ADD',\r\n    EDIT: 'EDIT',\r\n    VIEW: 'VIEW',\r\n}\r\n\r\nconst UploadAttachedment = (props: UploadAttachedmentProps) => {\r\n    const classes = useStyles();\r\n    const [selectedimageName, setSelectedimageName] = useState<string>()\r\n    const [imgUrl, setImgUrl] = useState<string>()\r\n    const [dialogState, setDialogState] = useState({\r\n        openConfirmationDialog: false,\r\n        dialogItemIndex: 0,\r\n        headingText: '',\r\n        paragraphText: '',\r\n    })\r\n\r\n\r\n    // const handelImageUpload = async (e: any) => {\r\n\r\n    //     // dispatch(imageUploade('reset'))\r\n    //     const target = e.target\r\n    //     const imageFile = await e.target.files[0]\r\n    //     if (imageFile) {\r\n    //         const options = {\r\n    //             maxSizeMB: 10,\r\n    //             maxWidthOrHeight: 1920,\r\n    //             useWebWorker: true\r\n    //         }\r\n\r\n    //         try {\r\n    //             const compressedFile = await imageCompression(imageFile, options);\r\n    //             console.log('target.value :', e, imageFile, compressedFile)\r\n    //             console.log('compressedFile instanceof Blob', compressedFile instanceof Blob); // true\r\n    //             console.log(`compressedFile size ${compressedFile.size / 1024 / 1024} MB`); // smaller than maxSizeMB\r\n    //             /*Maximum allowed size in bytes\r\n    //               5MB Example\r\n    //               Change first operand(multiplier) for your needs*/\r\n    //             const maxAllowedSize = 10 * 1024 * 1024;\r\n    //             if (compressedFile.size > maxAllowedSize) {\r\n    //                 alert(\"Reduce the file size !\")\r\n    //                 // Here you can ask your users to load correct file\r\n    //                 target.value = ''\r\n    //             } else {\r\n    //                 setSelectedimageName(compressedFile?.name)\r\n    //                 setImgUrl(URL.createObjectURL(imageFile))\r\n    //                 //   setUploadImageUpdate(true)\r\n    //                 //   formik.handleChange(e)\r\n    //                 //   dispatch(imageUploade(imageFile))\r\n    //                 //   setLoading(false)\r\n    //             }\r\n\r\n    //             // await uploadToServer(compressedFile); // write your own logic\r\n    //         } catch (error) {\r\n    //             console.log(error);\r\n    //         }\r\n\r\n    //     }\r\n    // }\r\n\r\n    const handleCancelImage = () => {\r\n        setSelectedimageName('')\r\n        setImgUrl('')\r\n    }\r\n\r\n    return (\r\n        <div className={classes.cmpWrapper}>\r\n\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={12} sm={4}>\r\n                    <FormLabel component=\"legend\">Upload attachment <ErrorIcon /></FormLabel>\r\n                    <TextField\r\n                        id=\"outlined-basic\"\r\n                        label=\"\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        name=\"insuranceClass\"\r\n                        //   onBlur={(e:any) => props.insuranceUpdate(props.data?.label, e.target.value)}\r\n                        // onChange={(e: any) => {\r\n                        //     // props.insuranceUpdate(props.data?.label, e.target.value)\r\n                        //     // setInputData(e.target.value)\r\n                        // }}\r\n                        size='small'\r\n                        // placeholder='hdf.pdf'\r\n                        inputProps={{ readOnly: true }}\r\n                        className={classes.uploadedDoc}\r\n                        value={props?.data?.insurance_document?.name}\r\n                        InputProps={{\r\n                            endAdornment: (\r\n                                <InputAdornment position=\"end\">\r\n                                    <a style={{ color: '#1c1c1c', display: 'flex', alignItems: 'center' }} href={URL.createObjectURL(props?.data?.insurance_document)} download> <GetAppIcon /></a>\r\n                                    <CloseIcon style={{ cursor: 'pointer' }} onClick={() => {\r\n                                        // props.removeDoc\r\n                                        setDialogState((prevState) => ({\r\n                                            ...prevState,\r\n                                            headingText: 'Delete Attachment',\r\n                                            paragraphText: 'Are you sure want to delete this Attachment?',\r\n                                            openConfirmationDialog: true\r\n                                        }))\r\n                                        // this.setState({dialogItemIndex: index })\r\n                                        // this.setState({headingText: 'Delete Class' })\r\n                                        // this.setState({paragraphText: 'Are you sure want to delete this class?' })\r\n                                        // this.setState({openConfirmationDialog: true })\r\n                                    }} />\r\n                                </InputAdornment>\r\n                            ),\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <InsertDriveFileIcon />\r\n                                </InputAdornment>\r\n                            ),\r\n                            readOnly: props.formType === enumFormAction.EDIT || props.formType === enumFormAction.ADD ? false : true,\r\n                        }}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={4}>\r\n                    <LabelWithIcon label='Document name' />\r\n                    <TextField\r\n                        id=\"outlined-basic\"\r\n                        label=\"\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        name=\"docName\"\r\n                        value={props?.data?.insurance_document?.name}\r\n                        //   onBlur={(e:any) => props.insuranceUpdate(props.data?.label, e.target.value)}\r\n                        onChange={(e: any) => props?.eventChange(e.target.value, enumUploadAttachedment.name)}\r\n                        size='small'\r\n                        InputProps={{\r\n                         readOnly: props.formType === enumFormAction.EDIT || props.formType === enumFormAction.ADD ? false : true,\r\n                        }}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={4}>\r\n                    <LabelWithIcon label='Comment (if any)' />\r\n                    <TextField\r\n                        id=\"outlined-basic\"\r\n                        label=\"\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        name=\"comment\"\r\n                        //   onBlur={(e:any) => props.insuranceUpdate(props.data?.label, e.target.value)}\r\n                        onChange={(e: any) => props?.eventChange(e.target.value, enumUploadAttachedment.comment)}\r\n                        size='small'\r\n                        InputProps={{\r\n                         readOnly: props.formType === enumFormAction.EDIT || props.formType === enumFormAction.ADD ? false : true,\r\n                        }}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n\r\n            <ConfirmationDialog\r\n                btnCancelText='Cancel'\r\n                btnOkText='Delete'\r\n                openDialog={dialogState?.openConfirmationDialog}\r\n                headingText={dialogState?.headingText}\r\n                paragraphText={dialogState?.paragraphText}\r\n                handleOk={() => {\r\n                    // this.handleContactCancel(this.state.dialogItemIndex);\r\n                    props.removeDoc();\r\n                    setDialogState((prevState) => ({\r\n                        ...prevState,\r\n                        openConfirmationDialog: false\r\n                    }))\r\n                }}\r\n                handleCancel={() => {\r\n                    setDialogState((prevState) => ({\r\n                        ...prevState,\r\n                        openConfirmationDialog: false\r\n                    }))\r\n                }}\r\n            />\r\n\r\n            {/* <Grid container spacing={3}>\r\n                <Grid item xs={12} sm={4} style={{paddingTop: '30px'}}>\r\n                    <LabelWithIcon label='Additional attechment' />\r\n                <TextField\r\n                        label=\"\"\r\n                        id=\"image-upload\"\r\n                        name='image'\r\n                        size=\"small\"\r\n                        type='file'\r\n                        variant=\"outlined\"\r\n                        hidden\r\n                        fullWidth\r\n                        inputProps={{\r\n                            // accept:\r\n                            //   \".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\",\r\n                            accept:\r\n                                \".png,.JPG,.JPEG,.pdf\",\r\n                        }}\r\n                        placeholder=\"hbjbjhbhjbjbjhbhjb\"\r\n                        InputProps={{\r\n                            // endAdornment: (\r\n                            //     //   <InputAdornment position='start' sx={{ position: 'absolute', left: '2px', top: '18px', }}>\r\n                            //     //     {\r\n                            //     //       cmp !== 'add' && editValues !== null && editValues !== undefined && uploadImageUpdate === false ? <img style={{ width: '25px', height: '25px' }} src={formik.values.image} alt=\"\" /> : ''\r\n                            //     //     }\r\n                            //     //   </InputAdornment>\r\n                            //     <InputAdornment position=\"end\">\r\n                            //         <a style={{ color: '#212121' }} href={imgUrl} download> <GetAppIcon /></a>  <CloseIcon />\r\n                            //     </InputAdornment>\r\n                            // ),\r\n                            startAdornment: (\r\n                                //   <InputAdornment position='start' sx={{ position: 'absolute', left: '2px', top: '18px', }}>\r\n                                //     {\r\n                                //       cmp !== 'add' && editValues !== null && editValues !== undefined && uploadImageUpdate === false ? <img style={{ width: '25px', height: '25px' }} src={formik.values.image} alt=\"\" /> : ''\r\n                                //     }\r\n                                //   </InputAdornment>\r\n                                <InputAdornment position=\"start\">\r\n                                    <div style={{ color: 'rgba(0, 0, 0, 0.23)' }}>Upload another attachment</div>\r\n                                </InputAdornment>\r\n                            )\r\n                        }}\r\n                        title=\"Choose a photo please\"\r\n                        className={classes.inputFile}\r\n                        //   className={cmp !== 'add' ? 'removeBorder customPadding' : 'removeBorder '}\r\n                        // value={formik.values.image}\r\n                        onChange={handelImageUpload}\r\n                    //   error={formik.touched.image && Boolean(formik.errors.image)}\r\n                    //   helperText={formik.touched.image && formik.errors.image}\r\n                    />\r\n                </Grid>\r\n            </Grid> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UploadAttachedment","/Users/surbhi/Desktop/Insurance-cmp/src/Components/Insurer/MotorInsurance.web.tsx",["146","147","148","149","150"],[],"import React, { useEffect, useState } from 'react';\r\nimport { FormControl, Grid, InputAdornment, InputLabel, makeStyles, MenuItem, Select, TextField } from '@material-ui/core';\r\nimport LabelWithIcon from '../LabelWithIcon';\r\nimport MultiSelect from '../MultiSelect.web'\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    cmpWrapper: {\r\n        backgroundColor: '#fff',\r\n        padding: '30px',\r\n        width: '100%',\r\n        '& legend': {\r\n            textAlign: 'left',\r\n            marginBottom: '10px',\r\n            display: 'flex',\r\n            fontSize: '14px',\r\n            // color: '#d0d0d0',\r\n            color: '#3d3d3d !important',\r\n            '& svg': {\r\n                fontSize: '15px',\r\n                color: '#222',\r\n                marginLeft: '6px',\r\n            }\r\n        },\r\n        '& label': {\r\n            color: '#3d3d3d !important',\r\n        }\r\n    },\r\n    formControl: {\r\n        // margin: theme.spacing(1),\r\n        minWidth: '100%',\r\n    },\r\n    lineSaprator: {\r\n        backgroundColor: '#e2e2e2',\r\n        height: '1.3px',\r\n        width: '100%',\r\n        margin: '18px 0px'\r\n    },\r\n})\r\n\r\nconst enumFormAction = {\r\n    ADD: 'ADD',\r\n    EDIT: 'EDIT',\r\n    VIEW: 'VIEW',\r\n}\r\n\r\ntype motorInsuranceDataType = {\r\n    insurance_class: string,\r\n    motor_premium: string,\r\n    motor_premium_minimum_value: string,\r\n    sedan_suv_minimum_excess: string,\r\n    pickup_minimum_execess: string,\r\n    van_minimum_excess: string,\r\n    lcv_minimum_execess: string,\r\n    hcv_minimum_excess: string,\r\n}\r\n\r\nconst enumMotorInsuranceProps = {\r\n    insurance_class: 'insurance_class',\r\n    motor_premium: 'motor_premium',\r\n    motor_premium_minimum_value: 'motor_premium_minimum_value',\r\n    sedan_suv_minimum_excess: 'sedan_suv_minimum_excess',\r\n    pickup_minimum_execess: 'pickup_minimum_execess',\r\n    van_minimum_excess: 'van_minimum_excess',\r\n    lcv_minimum_execess: 'lcv_minimum_execess',\r\n    hcv_minimum_excess: 'hcv_minimum_excess',\r\n}\r\n\r\nconst insuranceClassOptions: any = [\r\n    { value: 'Comprehensive', label: 'Comprehensive' },\r\n    { value: 'TPL', label: 'TPL' },\r\n];\r\n\r\n\r\ntype MotorInsuranceType = {\r\n    motorInsuranceProps: (key: string, value: string) => void,\r\n    data: motorInsuranceDataType,\r\n    submitEvent: boolean, \r\n    formType: string,\r\n}\r\n\r\nconst MotorInsurance = (props: MotorInsuranceType) => {\r\n    const classes = useStyles();\r\n    const [insuranceClass, setInsuranceClass] = useState('')\r\n    const [count, setCount] = useState(0)\r\n    const [errors, setErrors] = useState<any>({\r\n        insuranceClass: false,\r\n        motor_premium: false,\r\n        motor_premium_minimum_value: false,\r\n        sedan_suv_minimum_excess: false,\r\n        pickup_minimum_execess: false,\r\n        van_minimum_excess: false,\r\n        lcv_minimum_execess: false,\r\n        hcv_minimum_excess: false,\r\n    })\r\n\r\n    \r\n    useEffect(() => {\r\n        setCount(count+1)\r\n        if (count) {\r\n            const data:any = { ...props.data };\r\n            const temp:any = { ...errors };\r\n            if(Object.keys(data).length){\r\n                console.log(\"adsjkasd: \", data)\r\n                if(data['insuranceClass'] === undefined){\r\n                    temp['insuranceClass'] = true\r\n                }\r\n                for (const key in temp) {\r\n                    if (data[key] === '' || data[key] === undefined) {\r\n                        temp[key] = true\r\n                    }\r\n                }\r\n            }else{\r\n                for (const key in temp) {\r\n                        temp[key] = true\r\n                }\r\n            }\r\n\r\n            // if (props?.data?.insurance_class === '') {\r\n            //     temp['insuranceClass'] = true;\r\n            // }\r\n            // if (props?.data?.class_benefits === '') {\r\n            //     temp['classBenefits'] = true;\r\n            // }\r\n            setErrors(temp)\r\n        }\r\n    }, [props.submitEvent])\r\n\r\n    return (\r\n        <div className={classes.cmpWrapper}>\r\n\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={12} sm={4}>\r\n                    {/* <FormControl variant=\"outlined\" placeholder='kp' className={classes.formControl} size='small'>\r\n                        <LabelWithIcon label={'First commercial license legal name'} />\r\n                        <Select\r\n                            id=\"demo-simple-select-outlined\"\r\n                            inputProps={{ 'aria-label': 'Without label' }}\r\n                            style={{textAlign: 'left'}}\r\n                            placeholder='asnjkadsn'\r\n                        >\r\n                            <MenuItem value={10}>Comprehensive</MenuItem>\r\n                            <MenuItem value={20}>TPL</MenuItem>\r\n                        </Select>\r\n                    </FormControl> */}\r\n                    <LabelWithIcon label='Insurance Class' />\r\n                    <MultiSelect\r\n                        selectOptions={insuranceClassOptions}\r\n                        // selectValue={insuranceClass}\r\n                        selectValue={props.data.insurance_class}\r\n                        eventHandler={(selected: any) => {\r\n                            props.motorInsuranceProps(enumMotorInsuranceProps.insurance_class, selected)\r\n                            setInsuranceClass(selected)\r\n                            // insuranceClass && insuranceClass.length ? false : true\r\n                            \r\n                            if (insuranceClass && insuranceClass.length) {\r\n                                const temp = { ...errors };\r\n                                temp[enumMotorInsuranceProps.insurance_class] = true;\r\n                                setErrors(temp)\r\n                            } else {\r\n                                const temp = { ...errors };\r\n                                temp[enumMotorInsuranceProps.insurance_class] = false;\r\n                                setErrors(temp)\r\n                            }\r\n                        }}\r\n                        showError={errors[enumMotorInsuranceProps.insurance_class]}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={4}>\r\n                    <LabelWithIcon label={'Permiumm %'} />\r\n                      <TextField\r\n                              id=\"outlined-basic\"\r\n                              label=\"\"\r\n                              variant=\"outlined\"\r\n                              fullWidth\r\n                            //   name={props.data?.label}\r\n                              value={props.data?.motor_premium}\r\n                              //   onBlur={(e:any) => props.insuranceUpdate(props.data?.label, e.target.value)}\r\n                              onChange={(e:any) =>{\r\n                                const val = e.target.value.replace(/\\D/g, \"\");\r\n                                props.motorInsuranceProps(enumMotorInsuranceProps.motor_premium, val)\r\n                                if(val){\r\n                                    const temp = { ...errors };\r\n                                    temp[enumMotorInsuranceProps.motor_premium] = false;\r\n                                    setErrors(temp)\r\n                                }\r\n                              }} \r\n                              InputProps={{\r\n                                endAdornment: (\r\n                                  <InputAdornment position=\"end\">%</InputAdornment>\r\n                                ),\r\n                                readOnly: props.formType === enumFormAction.EDIT || props.formType === enumFormAction.ADD ? false : true,\r\n                              }}\r\n                              error={errors[enumMotorInsuranceProps.motor_premium]}\r\n                            //   helperText={formik.touched.iban && formik.errors.iban}\r\n                              size='small'\r\n                              required\r\n                          />\r\n                </Grid>\r\n                <Grid item xs={12} sm={4}>\r\n                    <LabelWithIcon label={'Permiumm minimum value'} />\r\n                    <TextField\r\n                        id=\"outlined-basic\"\r\n                        label=\"\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        size='small'\r\n                        value={props.data?.motor_premium_minimum_value}\r\n                        name={enumMotorInsuranceProps.motor_premium_minimum_value}\r\n                        onChange={(e: any) => {\r\n                            props.motorInsuranceProps(enumMotorInsuranceProps.motor_premium_minimum_value, e.target.value)\r\n                        \r\n                            if (props?.data?.motor_premium_minimum_value === '') {\r\n                                const temp = { ...errors };\r\n                                temp[enumMotorInsuranceProps.motor_premium_minimum_value] = true;\r\n                                setErrors(temp)\r\n                            } else {\r\n                                const temp = { ...errors };\r\n                                temp[enumMotorInsuranceProps.motor_premium_minimum_value] = false;\r\n                                setErrors(temp)\r\n                            }\r\n                        }}\r\n                        error={errors[enumMotorInsuranceProps.motor_premium_minimum_value]}\r\n                        InputProps={{\r\n                         readOnly: props.formType === enumFormAction.EDIT || props.formType === enumFormAction.ADD ? false : true,\r\n                        }}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <div className={classes.lineSaprator}></div>\r\n\r\n\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={12} sm={4}>\r\n                    <LabelWithIcon label={'Sadan / SUV minimum excess'} />\r\n                    <TextField\r\n                        id=\"outlined-basic\"\r\n                        label=\"\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        size='small'\r\n                        name={enumMotorInsuranceProps.sedan_suv_minimum_excess}\r\n                        value={props.data?.sedan_suv_minimum_excess}\r\n                        onChange={(e: any) => {\r\n                            props.motorInsuranceProps(enumMotorInsuranceProps.sedan_suv_minimum_excess, e.target.value)\r\n                        \r\n                            if (props?.data?.sedan_suv_minimum_excess === '') {\r\n                                const temp = { ...errors };\r\n                                temp[enumMotorInsuranceProps.sedan_suv_minimum_excess] = true;\r\n                                setErrors(temp)\r\n                            } else {\r\n                                const temp = { ...errors };\r\n                                temp[enumMotorInsuranceProps.sedan_suv_minimum_excess] = false;\r\n                                setErrors(temp)\r\n                            }\r\n                        }}\r\n                        error={errors[enumMotorInsuranceProps.sedan_suv_minimum_excess]}\r\n                        InputProps={{\r\n                         readOnly: props.formType === enumFormAction.EDIT || props.formType === enumFormAction.ADD ? false : true,\r\n                        }}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={4}>\r\n                    <LabelWithIcon label={'Pickup minimum excess'} />\r\n                    <TextField\r\n                        id=\"outlined-basic\"\r\n                        label=\"\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        size='small'\r\n                        name={enumMotorInsuranceProps.pickup_minimum_execess}\r\n                        value={props.data?.pickup_minimum_execess}\r\n                        onChange={(e: any) => {\r\n                            props.motorInsuranceProps(enumMotorInsuranceProps.pickup_minimum_execess, e.target.value)\r\n                            if (props?.data?.pickup_minimum_execess === '') {\r\n                                const temp = { ...errors };\r\n                                temp[enumMotorInsuranceProps.pickup_minimum_execess] = true;\r\n                                setErrors(temp)\r\n                            } else {\r\n                                const temp = { ...errors };\r\n                                temp[enumMotorInsuranceProps.pickup_minimum_execess] = false;\r\n                                setErrors(temp)\r\n                            }\r\n                        }}\r\n                        error={errors[enumMotorInsuranceProps.pickup_minimum_execess]}\r\n                        InputProps={{\r\n                         readOnly: props.formType === enumFormAction.EDIT || props.formType === enumFormAction.ADD ? false : true,\r\n                        }}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={4}>\r\n                    <LabelWithIcon label={'Van minimum excess'} />\r\n                    <TextField\r\n                        id=\"outlined-basic\"\r\n                        label=\"\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        size='small'\r\n                        name={enumMotorInsuranceProps.van_minimum_excess}\r\n                        value={props.data?.van_minimum_excess}\r\n                        onChange={(e: any) => {\r\n                            props.motorInsuranceProps(enumMotorInsuranceProps.van_minimum_excess, e.target.value)\r\n                            if (props?.data?.van_minimum_excess === '') {\r\n                                const temp = { ...errors };\r\n                                temp[enumMotorInsuranceProps.van_minimum_excess] = true;\r\n                                setErrors(temp)\r\n                            } else {\r\n                                const temp = { ...errors };\r\n                                temp[enumMotorInsuranceProps.van_minimum_excess] = false;\r\n                                setErrors(temp)\r\n                            }\r\n                        }}\r\n                        error={errors[enumMotorInsuranceProps.van_minimum_excess]}\r\n                        InputProps={{\r\n                         readOnly: props.formType === enumFormAction.EDIT || props.formType === enumFormAction.ADD ? false : true,\r\n                        }}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={12} sm={4}>\r\n                    <LabelWithIcon label={'LCV minimum excess'} />\r\n                    <TextField\r\n                        id=\"outlined-basic\"\r\n                        label=\"\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        size='small'\r\n                        name={enumMotorInsuranceProps.lcv_minimum_execess}\r\n                        value={props.data?.lcv_minimum_execess}\r\n                        onChange={(e: any) => {\r\n                            props.motorInsuranceProps(enumMotorInsuranceProps.lcv_minimum_execess, e.target.value)\r\n                            if (props?.data?.lcv_minimum_execess === '') {\r\n                                const temp = { ...errors };\r\n                                temp[enumMotorInsuranceProps.lcv_minimum_execess] = true;\r\n                                setErrors(temp)\r\n                            } else {\r\n                                const temp = { ...errors };\r\n                                temp[enumMotorInsuranceProps.lcv_minimum_execess] = false;\r\n                                setErrors(temp)\r\n                            }\r\n                        }}\r\n                        error={errors[enumMotorInsuranceProps?.lcv_minimum_execess]}\r\n                        InputProps={{\r\n                         readOnly: props.formType === enumFormAction.EDIT || props.formType === enumFormAction.ADD ? false : true,\r\n                        }}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={4}>\r\n                    <LabelWithIcon label={'HCV minimum excess'} />\r\n                    <TextField\r\n                        id=\"outlined-basic\"\r\n                        label=\"\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        size='small'\r\n                        name={enumMotorInsuranceProps.hcv_minimum_excess}\r\n                        value={props.data?.hcv_minimum_excess}\r\n                        onChange={(e: any) => {\r\n                            props.motorInsuranceProps(enumMotorInsuranceProps.hcv_minimum_excess, e.target.value)\r\n                            if (props?.data?.hcv_minimum_excess === '') {\r\n                                const temp = { ...errors };\r\n                                temp[enumMotorInsuranceProps.hcv_minimum_excess] = true;\r\n                                setErrors(temp)\r\n                            } else {\r\n                                const temp = { ...errors };\r\n                                temp[enumMotorInsuranceProps.hcv_minimum_excess] = false;\r\n                                setErrors(temp)\r\n                            }\r\n                        }}\r\n                        error={errors[enumMotorInsuranceProps?.hcv_minimum_excess]}\r\n                        InputProps={{\r\n                         readOnly: props.formType === enumFormAction.EDIT || props.formType === enumFormAction.ADD ? false : true,\r\n                        }}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MotorInsurance","/Users/surbhi/Desktop/Insurance-cmp/src/Components/Insurer/SiibCommissionRate.web.tsx",["151","152","153","154"],[],"import React, { useEffect, useState } from 'react'\r\nimport { FormLabel, Grid, InputAdornment, makeStyles, TextField } from '@material-ui/core'\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    cmpWrapper:{\r\n        backgroundColor: '#fff',\r\n        padding: '30px',\r\n        width: '100%',\r\n        '& legend': {\r\n            textAlign: 'left',\r\n            marginBottom: '10px',\r\n            display: 'flex',\r\n            fontSize: '14px',\r\n            // color: '#d0d0d0',\r\n            color: '#3d3d3d',\r\n            '& svg': {\r\n                fontSize: '15px',\r\n                color: '#222',\r\n                marginLeft: '6px',\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\ntype inputDataType = {\r\n    value: string,\r\n    label: string,\r\n}\r\n\r\nconst enumFormAction = {\r\n    ADD: 'ADD',\r\n    EDIT: 'EDIT',\r\n    VIEW: 'VIEW',\r\n}\r\n\r\ntype SiibCommissionRateProps = {\r\n    insuranceInputs: any,\r\n    addSiibCommission: (label: string,value:number) => void,\r\n    submitEvent: boolean,\r\n    formType: string,\r\n    siibComissionRate:any\r\n}\r\n\r\nconst CustomInput = (props:any) => {\r\n    const [inputData, setInputData] = useState<number | null>(null)\r\n    const [showError, setShowError] = useState(false);\r\n    const [count, setCount] = useState(0)\r\n    \r\n    useEffect(() => {\r\n      setCount(count+1)\r\n      if (count) {\r\n        inputData === null ? setShowError(true) : setShowError(false)\r\n      }\r\n      props.siibPercentageData && setShowError(false)\r\n  }, [props.submitEvent])\r\n  \r\n    return (\r\n        <>\r\n        <FormLabel component=\"legend\">{props?.data?.label} Insurance <ErrorIcon /></FormLabel>\r\n                          <TextField\r\n                              id=\"outlined-basic\"\r\n                              label=\"\"\r\n                              variant=\"outlined\"\r\n                              fullWidth\r\n                              name={props?.data?.label}\r\n                              value={props?.siibPercentageData}\r\n                              // value={props.data.value}\r\n                              //   onBlur={(e:any) => props.insuranceUpdate(props.data?.label, e.target.value)}\r\n                              onChange={(e:any) =>{\r\n                                const val = e.target.value.replace(/\\D/g, \"\");\r\n                                setInputData(val)\r\n                                val && setShowError(false);\r\n                                props?.insuranceUpdate(props?.data?.label, val)\r\n                              }} \r\n                              InputProps={{\r\n                                endAdornment: (\r\n                                  <InputAdornment position=\"end\">%</InputAdornment>\r\n                                ),\r\n                               readOnly: props.formType === enumFormAction.EDIT || props.formType === enumFormAction.ADD ? false : true,\r\n                              }}\r\n                              // value={formik.values.iban}\r\n                              // onChange={formik.handleChange}\r\n                              error={(inputData !== null && inputData > 100 ? true : false) || showError}\r\n                            //   helperText={formik.touched.iban && formik.errors.iban}\r\n                              size='small'\r\n                              required\r\n                          />\r\n        </>\r\n    )\r\n}\r\n\r\nconst SiibCommissionRate = (props:SiibCommissionRateProps) => {\r\n    const classes = useStyles();\r\n    const [allInsurancesData, setAllInsurancesData] = useState<any>(null)\r\n    // const [commissionRate, setCommissionRate] = useState<number>(0);\r\n\r\n    useEffect(() => {\r\n      setAllInsurancesData(props?.insuranceInputs)\r\n      console.log(\"SiibCommissionRate\", props?.insuranceInputs )\r\n    }, [])\r\n    \r\n  // useEffect(() => {\r\n  //   if(props.formType === enumFormAction.EDIT){\r\n  //     setAllInsurancesData(props.insuranceInputs)\r\n  //   }\r\n  // }, [props.insuranceInputs])\r\n    \r\n    \r\n    const handleInsuranceUpdate = (label:string, value:number) => {\r\n        console.log(\"event trigger\", allInsurancesData, value)\r\n\r\n        if(value <= 100) {\r\n            console.log(\"SiibCommissionRate :\",label,value )\r\n            props?.addSiibCommission(label,value)\r\n        }else{\r\n            console.log(\"else condition\")\r\n            toast.error(`${label} Insurance vaue not more than 100%`)\r\n        }\r\n        // setAllInsurancesData((prevState:any) => [...prevState, newState])\r\n    }\r\n  return (\r\n    <div className={classes.cmpWrapper}>\r\n<ToastContainer />\r\n          <Grid container spacing={3}>\r\n              {\r\n                  props?.insuranceInputs && props?.insuranceInputs?.types_of_insurance && props?.insuranceInputs?.types_of_insurance?.map((item: any) => (\r\n                    <Grid item xs={12} sm={4} key={item}>\r\n                        <CustomInput data={item} formType={props?.formType} siibPercentageData={props?.siibComissionRate[item?.label]} insuranceUpdate={handleInsuranceUpdate} submitEvent={props?.submitEvent}/>\r\n                      </Grid>\r\n                  ))\r\n              }\r\n          </Grid>        \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SiibCommissionRate","/Users/surbhi/Desktop/Insurance-cmp/src/Components/Insurer/Contact.web.tsx",["155","156","157","158","159","160","161"],[],"import React, { useEffect, useState } from 'react'\r\nimport { FormControl, Grid, InputAdornment, makeStyles, MenuItem, Select, TextField } from '@material-ui/core';\r\nimport LabelWithIcon from '../LabelWithIcon';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    cmpWrapper: {\r\n        backgroundColor: '#fff',\r\n        padding: '30px',\r\n        // width: '100%',\r\n        '& legend': {\r\n            textAlign: 'left',\r\n            marginBottom: '10px',\r\n            display: 'flex',\r\n            fontSize: '14px',\r\n            // color: '#d0d0d0',\r\n            color: '#3d3d3d !important',\r\n            '& svg': {\r\n                fontSize: '15px',\r\n                color: '#222',\r\n                marginLeft: '6px',\r\n            }\r\n        },\r\n        '& label': {\r\n            color: '#3d3d3d !important',\r\n        }\r\n    },\r\n    formControl: {\r\n        // margin: theme.spacing(1),\r\n        minWidth: 120,\r\n    },\r\n    lineSaprator: {\r\n        backgroundColor: '#e2e2e2',\r\n        height: '1.3px',\r\n        width: '100%',\r\n        margin: '18px 0px'\r\n    },\r\n})\r\ntype contactsType = {\r\n    first_name: string,\r\n    last_name: string,\r\n    position: string,\r\n    phone_number: string,\r\n    email: string,\r\n}\r\n\r\nconst enumContact = {\r\n    first_name: 'first_name',\r\n    last_name: 'last_name',\r\n    position: 'position',\r\n    phone_number: 'phone_number',\r\n    email: 'email',\r\n}\r\n\r\nconst enumFormAction = {\r\n    ADD: 'ADD',\r\n    EDIT: 'EDIT',\r\n    VIEW: 'VIEW',\r\n}\r\n\r\ntype ContactProps = {\r\n    addData: (key: string, value: string) => void,\r\n    // contactProp: contactsType,\r\n    contactProp: any,\r\n    submitEvent: boolean,\r\n    formType: string,\r\n}\r\n\r\nconst Contact = (props: ContactProps) => {\r\n    const classes = useStyles();\r\n    // const [phError, setPhError] = useState(false)\r\n    // const [emailError, setEmailError] = useState(false)\r\n    const [count, setCount] = useState(0)\r\n    const [errors, setErrors] = useState<any>({\r\n        email: false,\r\n        first_name: false,\r\n        last_name: false,\r\n        phone_number: false,\r\n        position: false,\r\n    })\r\n\r\n\r\n    useEffect(() => {\r\n        setCount(count + 1)\r\n        if (count) {\r\n            const temp = { ...errors };\r\n            for (const key in temp) {\r\n                if (props.contactProp[key] === '') {\r\n                    temp[key] = true\r\n                }\r\n            }\r\n\r\n            setErrors(temp)\r\n        }\r\n    }, [props.submitEvent])\r\n\r\n\r\n    return (\r\n        <div className={classes.cmpWrapper}>\r\n\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={12} sm={4}>\r\n                    <LabelWithIcon label={'First name'} />\r\n                    <TextField\r\n                        id=\"outlined-basic\"\r\n                        label=\"\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        size='small'\r\n                        value={props.contactProp?.first_name}\r\n                        name={enumContact.first_name}\r\n                        onChange={(e) => {\r\n                            props.addData(enumContact.first_name, e.target.value)\r\n\r\n                            const temp: any = { ...errors };\r\n                            temp[enumContact.first_name] = false;\r\n                            setErrors(temp)\r\n                        }}\r\n                        error={errors[enumContact.first_name]}\r\n                        InputProps={{\r\n                            readOnly: props.formType === enumFormAction.EDIT || props.formType === enumFormAction.ADD ? false : true,\r\n                        }}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={4}>\r\n                    <LabelWithIcon label={'Last name'} />\r\n                    <TextField\r\n                        id=\"outlined-basic\"\r\n                        label=\"\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        size='small'\r\n                        value={props.contactProp.last_name}\r\n                        name={enumContact.last_name}\r\n                        onChange={(e) => {\r\n                            props.addData(enumContact.last_name, e.target.value)\r\n\r\n                            const temp: any = { ...errors };\r\n                            temp[enumContact.last_name] = false;\r\n                            setErrors(temp)\r\n                        }}\r\n                        error={errors[enumContact.last_name]}\r\n                        InputProps={{\r\n                            readOnly: props.formType === enumFormAction.EDIT || props.formType === enumFormAction.ADD ? false : true,\r\n                        }}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={4}>\r\n                    <LabelWithIcon label={'Position(optional)'} />\r\n                    <TextField\r\n                        id=\"outlined-basic\"\r\n                        label=\"\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        size='small'\r\n                        value={props.contactProp.position}\r\n                        name={enumContact.position}\r\n                        onChange={(e) => {\r\n                            props.addData(enumContact.position, e.target.value)\r\n\r\n                            const temp: any = { ...errors };\r\n                            temp[enumContact.position] = false;\r\n                            setErrors(temp)\r\n                        }}\r\n                        error={errors[enumContact.position]}\r\n                        InputProps={{\r\n                            readOnly: props.formType === enumFormAction.EDIT || props.formType === enumFormAction.ADD ? false : true,\r\n                        }}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={12} sm={4}>\r\n                    <LabelWithIcon label={'Phone number'} />\r\n                    <TextField\r\n                        id=\"outlined-basic\"\r\n                        label=\"\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        value={props.contactProp.phone_number}\r\n                        name={enumContact.phone_number}\r\n                        onChange={(e: any) => {\r\n                            const val = e.target.value.replace(/\\D/g, \"\");\r\n                            const phPattern = new RegExp(/^((?:[+?0?0?966]+)(?:\\s?\\d{2})(?:\\s?\\d{7}))$/);\r\n                            props.addData(enumContact.phone_number, val)\r\n                            if (phPattern.test(val)) {\r\n                                if (val === '') {\r\n                                    const temp: any = { ...errors };\r\n                                    temp[enumContact.phone_number] = true;\r\n                                    setErrors(temp)\r\n                                } else {\r\n                                    const temp: any = { ...errors };\r\n                                    temp[enumContact.phone_number] = false;\r\n                                    setErrors(temp)\r\n                                }\r\n                            } else {\r\n                                const temp: any = { ...errors };\r\n                                temp[enumContact.phone_number] = true;\r\n                                setErrors(temp)\r\n                            }\r\n                        }}\r\n                        // value={formik.values.iban\r\n                        // onChange={formik.handleChange}\r\n                        error={errors[enumContact.phone_number]}\r\n                        //   helperText={formik.touched.iban && formik.errors.iban}\r\n                        size='small'\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <img src=\"/assets/images/SAUDI_ARABIA_FLAG.png\" height=\"35px\" width=\"35px\" /> + 966 <div />\r\n                                </InputAdornment>\r\n                            ),\r\n                            readOnly: props.formType === enumFormAction.EDIT || props.formType === enumFormAction.ADD ? false : true,\r\n                        }}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={4}>\r\n                    <LabelWithIcon label={'Email'} />\r\n                    <TextField\r\n                        id=\"outlined-basic\"\r\n                        label=\"\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        size='small'\r\n                        value={props.contactProp.email}\r\n                        name={enumContact.email}\r\n                        onChange={(e) => {\r\n                            const emailPattern = new RegExp(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/);\r\n                            props.addData(enumContact.email, e.target.value)\r\n                            if (emailPattern.test(e.target.value)) {\r\n                                const temp: any = { ...errors };\r\n                                temp[enumContact.email] = false;\r\n                                setErrors(temp)\r\n                            } else {\r\n                                const temp: any = { ...errors };\r\n                                temp[enumContact.email] = true;\r\n                                setErrors(temp)\r\n                            }\r\n                        }}\r\n                        error={errors[enumContact.email]}\r\n                        InputProps={{\r\n                            readOnly: props.formType === enumFormAction.EDIT || props.formType === enumFormAction.ADD ? false : true,\r\n                        }}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact","/Users/surbhi/Desktop/Insurance-cmp/src/Components/MultiSelect.web.tsx",["162","163","164","165"],[],"import React, { useEffect, useState } from 'react'\r\nimport { FormHelperText, makeStyles } from '@material-ui/core'\r\nimport Select from 'react-select';\r\nimport LabelWithIcon from './LabelWithIcon'\r\n\r\nconst useStyles = makeStyles({\r\n\r\n    selectStyle: {\r\n        '& .css-3w2yfm-ValueContainer > div': {\r\n            backgroundColor: '#cbdeec',\r\n        },\r\n        '& .css-3w2yfm-ValueContainer > div:last-child': {\r\n            backgroundColor: '#fff',\r\n        }\r\n    },\r\n    selectError: {\r\n        '& > div': {\r\n            // height: '56px',\r\n            borderColor: 'red',\r\n            backgroundColor: '#fff',\r\n        }\r\n    },\r\n    selectRemoveicon: {\r\n        '& [role=\"button\"]': {\r\n            display: 'none'\r\n        }\r\n    }\r\n})\r\n\r\ntype MultiSelectProps = {\r\n    selectOptions: any,\r\n    selectValue: any,\r\n    disable?: boolean,\r\n    showError?: boolean,\r\n    eventHandler: (selected: any) => void,\r\n}\r\n\r\nconst MultiSelect = (props: MultiSelectProps) => {\r\n    const classes = useStyles();\r\n    // const [count, setCount] = useState(0)\r\n    // const [errorShow, setErrorShow] = useState(false)\r\n    // useEffect(() => {\r\n    //     setCount(count+1)\r\n    //     if (count) {\r\n    //         setErrorShow(props?.showError)\r\n    //     }\r\n    // }, [props.showError])\r\n    return (\r\n        <div>\r\n            <Select\r\n                isMulti\r\n                options={props.selectOptions}\r\n                value={props.selectValue}\r\n                onChange={props.eventHandler}\r\n                isDisabled={props.disable || false}\r\n                className={`${classes.selectStyle} ${props?.showError ? classes.selectError : ''} ${props.disable ? classes.selectRemoveicon : ''}`}\r\n            />\r\n            {/* {\r\n                errorShow ? (<FormHelperText component=\"div\" style={{ flexGrow: 1, color: '#ff1943', }}>This field is required.</FormHelperText>) : null\r\n            } */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MultiSelect",{"ruleId":"166","severity":1,"message":"167","line":2,"column":8,"nodeType":"168","messageId":"169","endLine":2,"endColumn":12},{"ruleId":"166","severity":1,"message":"170","line":4,"column":8,"nodeType":"168","messageId":"169","endLine":4,"endColumn":17},{"ruleId":"166","severity":1,"message":"171","line":5,"column":8,"nodeType":"168","messageId":"169","endLine":5,"endColumn":23},{"ruleId":"166","severity":1,"message":"172","line":6,"column":8,"nodeType":"168","messageId":"169","endLine":6,"endColumn":26},{"ruleId":"166","severity":1,"message":"173","line":7,"column":8,"nodeType":"168","messageId":"169","endLine":7,"endColumn":24},{"ruleId":"166","severity":1,"message":"174","line":8,"column":8,"nodeType":"168","messageId":"169","endLine":8,"endColumn":22},{"ruleId":"166","severity":1,"message":"175","line":9,"column":8,"nodeType":"168","messageId":"169","endLine":9,"endColumn":15},{"ruleId":"166","severity":1,"message":"176","line":10,"column":8,"nodeType":"168","messageId":"169","endLine":10,"endColumn":26},{"ruleId":"166","severity":1,"message":"177","line":20,"column":10,"nodeType":"168","messageId":"169","endLine":20,"endColumn":24},{"ruleId":"166","severity":1,"message":"178","line":23,"column":9,"nodeType":"168","messageId":"169","endLine":23,"endColumn":27},{"ruleId":"166","severity":1,"message":"179","line":2,"column":22,"nodeType":"168","messageId":"169","endLine":2,"endColumn":34},{"ruleId":"166","severity":1,"message":"180","line":2,"column":108,"nodeType":"168","messageId":"169","endLine":2,"endColumn":113},{"ruleId":"166","severity":1,"message":"181","line":2,"column":115,"nodeType":"168","messageId":"169","endLine":2,"endColumn":122},{"ruleId":"166","severity":1,"message":"182","line":2,"column":124,"nodeType":"168","messageId":"169","endLine":2,"endColumn":129},{"ruleId":"166","severity":1,"message":"183","line":2,"column":131,"nodeType":"168","messageId":"169","endLine":2,"endColumn":140},{"ruleId":"166","severity":1,"message":"184","line":2,"column":142,"nodeType":"168","messageId":"169","endLine":2,"endColumn":151},{"ruleId":"166","severity":1,"message":"185","line":2,"column":153,"nodeType":"168","messageId":"169","endLine":2,"endColumn":167},{"ruleId":"166","severity":1,"message":"186","line":2,"column":169,"nodeType":"168","messageId":"169","endLine":2,"endColumn":180},{"ruleId":"166","severity":1,"message":"187","line":2,"column":182,"nodeType":"168","messageId":"169","endLine":2,"endColumn":191},{"ruleId":"166","severity":1,"message":"188","line":2,"column":193,"nodeType":"168","messageId":"169","endLine":2,"endColumn":208},{"ruleId":"166","severity":1,"message":"189","line":2,"column":210,"nodeType":"168","messageId":"169","endLine":2,"endColumn":218},{"ruleId":"166","severity":1,"message":"190","line":3,"column":10,"nodeType":"168","messageId":"169","endLine":3,"endColumn":27},{"ruleId":"166","severity":1,"message":"191","line":3,"column":41,"nodeType":"168","messageId":"169","endLine":3,"endColumn":49},{"ruleId":"166","severity":1,"message":"192","line":4,"column":8,"nodeType":"168","messageId":"169","endLine":4,"endColumn":30},{"ruleId":"166","severity":1,"message":"193","line":18,"column":8,"nodeType":"168","messageId":"169","endLine":18,"endColumn":24},{"ruleId":"166","severity":1,"message":"194","line":160,"column":6,"nodeType":"168","messageId":"169","endLine":160,"endColumn":30},{"ruleId":"166","severity":1,"message":"195","line":169,"column":7,"nodeType":"168","messageId":"169","endLine":169,"endColumn":26},{"ruleId":"166","severity":1,"message":"196","line":193,"column":6,"nodeType":"168","messageId":"169","endLine":193,"endColumn":18},{"ruleId":"166","severity":1,"message":"197","line":212,"column":6,"nodeType":"168","messageId":"169","endLine":212,"endColumn":28},{"ruleId":"198","severity":1,"message":"199","line":599,"column":35,"nodeType":"200","messageId":"201","endLine":599,"endColumn":37},{"ruleId":"198","severity":1,"message":"199","line":633,"column":29,"nodeType":"200","messageId":"201","endLine":633,"endColumn":31},{"ruleId":"198","severity":1,"message":"199","line":895,"column":101,"nodeType":"200","messageId":"201","endLine":895,"endColumn":103},{"ruleId":"198","severity":1,"message":"199","line":899,"column":45,"nodeType":"200","messageId":"201","endLine":899,"endColumn":47},{"ruleId":"198","severity":1,"message":"199","line":913,"column":101,"nodeType":"200","messageId":"201","endLine":913,"endColumn":103},{"ruleId":"198","severity":1,"message":"199","line":938,"column":37,"nodeType":"200","messageId":"201","endLine":938,"endColumn":39},{"ruleId":"166","severity":1,"message":"202","line":1022,"column":35,"nodeType":"168","messageId":"169","endLine":1022,"endColumn":44},{"ruleId":"203","severity":1,"message":"204","line":1146,"column":94,"nodeType":"205","messageId":"206","endLine":1146,"endColumn":95},{"ruleId":"198","severity":1,"message":"207","line":1212,"column":125,"nodeType":"200","messageId":"208","endLine":1212,"endColumn":127},{"ruleId":"198","severity":1,"message":"207","line":1254,"column":125,"nodeType":"200","messageId":"208","endLine":1254,"endColumn":127},{"ruleId":"166","severity":1,"message":"209","line":3,"column":36,"nodeType":"168","messageId":"169","endLine":3,"endColumn":44},{"ruleId":"166","severity":1,"message":"210","line":44,"column":12,"nodeType":"168","messageId":"169","endLine":44,"endColumn":16},{"ruleId":"166","severity":1,"message":"211","line":46,"column":11,"nodeType":"168","messageId":"169","endLine":46,"endColumn":26},{"ruleId":"166","severity":1,"message":"212","line":50,"column":11,"nodeType":"168","messageId":"169","endLine":50,"endColumn":22},{"ruleId":"166","severity":1,"message":"213","line":1,"column":28,"nodeType":"168","messageId":"169","endLine":1,"endColumn":34},{"ruleId":"166","severity":1,"message":"214","line":2,"column":10,"nodeType":"168","messageId":"169","endLine":2,"endColumn":19},{"ruleId":"166","severity":1,"message":"215","line":3,"column":8,"nodeType":"168","messageId":"169","endLine":3,"endColumn":17},{"ruleId":"216","severity":1,"message":"217","line":71,"column":8,"nodeType":"218","endLine":71,"endColumn":27,"suggestions":"219"},{"ruleId":"166","severity":1,"message":"220","line":2,"column":88,"nodeType":"168","messageId":"169","endLine":2,"endColumn":99},{"ruleId":"166","severity":1,"message":"221","line":2,"column":101,"nodeType":"168","messageId":"169","endLine":2,"endColumn":115},{"ruleId":"166","severity":1,"message":"214","line":2,"column":117,"nodeType":"168","messageId":"169","endLine":2,"endColumn":126},{"ruleId":"166","severity":1,"message":"222","line":2,"column":134,"nodeType":"168","messageId":"169","endLine":2,"endColumn":144},{"ruleId":"166","severity":1,"message":"223","line":2,"column":146,"nodeType":"168","messageId":"169","endLine":2,"endColumn":154},{"ruleId":"166","severity":1,"message":"215","line":4,"column":8,"nodeType":"168","messageId":"169","endLine":4,"endColumn":17},{"ruleId":"166","severity":1,"message":"224","line":5,"column":10,"nodeType":"168","messageId":"169","endLine":5,"endColumn":16},{"ruleId":"166","severity":1,"message":"225","line":5,"column":29,"nodeType":"168","messageId":"169","endLine":5,"endColumn":33},{"ruleId":"166","severity":1,"message":"226","line":5,"column":35,"nodeType":"168","messageId":"169","endLine":5,"endColumn":40},{"ruleId":"166","severity":1,"message":"227","line":5,"column":42,"nodeType":"168","messageId":"169","endLine":5,"endColumn":54},{"ruleId":"166","severity":1,"message":"228","line":7,"column":8,"nodeType":"168","messageId":"169","endLine":7,"endColumn":14},{"ruleId":"166","severity":1,"message":"229","line":97,"column":7,"nodeType":"168","messageId":"169","endLine":97,"endColumn":18},{"ruleId":"166","severity":1,"message":"230","line":101,"column":7,"nodeType":"168","messageId":"169","endLine":101,"endColumn":27},{"ruleId":"166","severity":1,"message":"231","line":102,"column":7,"nodeType":"168","messageId":"169","endLine":102,"endColumn":36},{"ruleId":"166","severity":1,"message":"232","line":143,"column":35,"nodeType":"168","messageId":"169","endLine":143,"endColumn":59},{"ruleId":"166","severity":1,"message":"233","line":147,"column":44,"nodeType":"168","messageId":"169","endLine":147,"endColumn":77},{"ruleId":"216","severity":1,"message":"234","line":190,"column":8,"nodeType":"218","endLine":190,"endColumn":37,"suggestions":"235"},{"ruleId":"166","severity":1,"message":"193","line":3,"column":8,"nodeType":"168","messageId":"169","endLine":3,"endColumn":24},{"ruleId":"166","severity":1,"message":"236","line":97,"column":12,"nodeType":"168","messageId":"169","endLine":97,"endColumn":29},{"ruleId":"166","severity":1,"message":"237","line":98,"column":12,"nodeType":"168","messageId":"169","endLine":98,"endColumn":18},{"ruleId":"166","severity":1,"message":"238","line":149,"column":11,"nodeType":"168","messageId":"169","endLine":149,"endColumn":28},{"ruleId":"166","severity":1,"message":"220","line":2,"column":10,"nodeType":"168","messageId":"169","endLine":2,"endColumn":21},{"ruleId":"166","severity":1,"message":"222","line":2,"column":45,"nodeType":"168","messageId":"169","endLine":2,"endColumn":55},{"ruleId":"166","severity":1,"message":"223","line":2,"column":69,"nodeType":"168","messageId":"169","endLine":2,"endColumn":77},{"ruleId":"166","severity":1,"message":"228","line":2,"column":79,"nodeType":"168","messageId":"169","endLine":2,"endColumn":85},{"ruleId":"216","severity":1,"message":"239","line":127,"column":8,"nodeType":"218","endLine":127,"endColumn":27,"suggestions":"240"},{"ruleId":"166","severity":1,"message":"241","line":4,"column":8,"nodeType":"168","messageId":"169","endLine":4,"endColumn":13},{"ruleId":"166","severity":1,"message":"242","line":30,"column":6,"nodeType":"168","messageId":"169","endLine":30,"endColumn":19},{"ruleId":"216","severity":1,"message":"243","line":60,"column":6,"nodeType":"218","endLine":60,"endColumn":25,"suggestions":"244"},{"ruleId":"216","severity":1,"message":"245","line":105,"column":8,"nodeType":"218","endLine":105,"endColumn":10,"suggestions":"246"},{"ruleId":"166","severity":1,"message":"220","line":2,"column":10,"nodeType":"168","messageId":"169","endLine":2,"endColumn":21},{"ruleId":"166","severity":1,"message":"223","line":2,"column":57,"nodeType":"168","messageId":"169","endLine":2,"endColumn":65},{"ruleId":"166","severity":1,"message":"228","line":2,"column":67,"nodeType":"168","messageId":"169","endLine":2,"endColumn":73},{"ruleId":"166","severity":1,"message":"196","line":39,"column":6,"nodeType":"168","messageId":"169","endLine":39,"endColumn":18},{"ruleId":"216","severity":1,"message":"247","line":95,"column":8,"nodeType":"218","endLine":95,"endColumn":27,"suggestions":"248"},{"ruleId":"249","severity":1,"message":"250","line":211,"column":37,"nodeType":"251","endLine":211,"endColumn":114},{"ruleId":"252","severity":1,"message":"253","line":229,"column":67,"nodeType":"254","messageId":"255","endLine":229,"endColumn":68,"suggestions":"256"},{"ruleId":"166","severity":1,"message":"257","line":1,"column":17,"nodeType":"168","messageId":"169","endLine":1,"endColumn":26},{"ruleId":"166","severity":1,"message":"258","line":1,"column":28,"nodeType":"168","messageId":"169","endLine":1,"endColumn":36},{"ruleId":"166","severity":1,"message":"221","line":2,"column":10,"nodeType":"168","messageId":"169","endLine":2,"endColumn":24},{"ruleId":"166","severity":1,"message":"259","line":4,"column":8,"nodeType":"168","messageId":"169","endLine":4,"endColumn":21},"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Kishanpal' is defined but never used.","'InsurerOverview' is defined but never used.","'SiibCommissionRate' is defined but never used.","'MedicalInsurance' is defined but never used.","'MotorInsurance' is defined but never used.","'Contact' is defined but never used.","'UploadAttachedment' is defined but never used.","'inssuranceData' is assigned a value but never used.","'insuranceTypesData' is assigned a value but never used.","'createStyles' is defined but never used.","'Paper' is defined but never used.","'Popover' is defined but never used.","'Table' is defined but never used.","'TableBody' is defined but never used.","'TableCell' is defined but never used.","'TableContainer' is defined but never used.","'TableFooter' is defined but never used.","'TableHead' is defined but never used.","'TablePagination' is defined but never used.","'TableRow' is defined but never used.","'ArrowBackIosSharp' is defined but never used.","'MoreVert' is defined but never used.","'TablePaginationActions' is defined but never used.","'imageCompression' is defined but never used.","'medicalInsuranceDataType' is defined but never used.","'emumMedicalInsuranc' is assigned a value but never used.","'contactsType' is defined but never used.","'motorInsuranceDataType' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'nestedKey' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'useTheme' is defined but never used.","'open' is assigned a value but never used.","'handleClickOpen' is assigned a value but never used.","'handleClose' is assigned a value but never used.","'useRef' is defined but never used.","'FormLabel' is defined but never used.","'ErrorIcon' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'count', 'errors', 'props?.data?.class_benefits', and 'props?.data?.insurance_class'. Either include them or remove the dependency array. You can also do a functional update 'setCount(c => ...)' if you only need 'count' in the 'setCount' call.","ArrayExpression",["260"],"'FormControl' is defined but never used.","'FormHelperText' is defined but never used.","'InputLabel' is defined but never used.","'MenuItem' is defined but never used.","'Formik' is defined but never used.","'Form' is defined but never used.","'Field' is defined but never used.","'ErrorMessage' is defined but never used.","'Select' is defined but never used.","'enumSegment' is assigned a value but never used.","'segmentDefaultValues' is assigned a value but never used.","'typesOfInsuranceDefaultValues' is assigned a value but never used.","'setSegmentDefaultOptions' is assigned a value but never used.","'setTypesOfInsuranceDefaultOptions' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'formValues' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["261"],"'selectedimageName' is assigned a value but never used.","'imgUrl' is assigned a value but never used.","'handleCancelImage' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'count', 'errors', and 'props.data'. Either include them or remove the dependency array. You can also do a functional update 'setCount(c => ...)' if you only need 'count' in the 'setCount' call.",["262"],"'Alert' is defined but never used.","'inputDataType' is defined but never used.","React Hook useEffect has missing dependencies: 'count', 'inputData', and 'props.siibPercentageData'. Either include them or remove the dependency array. You can also do a functional update 'setCount(c => ...)' if you only need 'count' in the 'setCount' call.",["263"],"React Hook useEffect has a missing dependency: 'props?.insuranceInputs'. Either include it or remove the dependency array. If 'setAllInsurancesData' needs the current value of 'props.insuranceInputs', you can also switch to useReducer instead of useState and read 'props.insuranceInputs' in the reducer.",["264"],"React Hook useEffect has missing dependencies: 'count', 'errors', and 'props.contactProp'. Either include them or remove the dependency array. You can also do a functional update 'setCount(c => ...)' if you only need 'count' in the 'setCount' call.",["265"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["266","267"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'LabelWithIcon' is defined but never used.",{"desc":"268","fix":"269"},{"desc":"270","fix":"271"},{"desc":"272","fix":"273"},{"desc":"274","fix":"275"},{"desc":"276","fix":"277"},{"desc":"278","fix":"279"},{"messageId":"280","fix":"281","desc":"282"},{"messageId":"283","fix":"284","desc":"285"},"Update the dependencies array to be: [count, errors, props?.data?.class_benefits, props?.data?.insurance_class, props.submitEvent]",{"range":"286","text":"287"},"Update the dependencies array to be: [formValues, props, segment, types_of_insurance]",{"range":"288","text":"289"},"Update the dependencies array to be: [count, errors, props.data, props.submitEvent]",{"range":"290","text":"291"},"Update the dependencies array to be: [count, inputData, props.siibPercentageData, props.submitEvent]",{"range":"292","text":"293"},"Update the dependencies array to be: [props?.insuranceInputs]",{"range":"294","text":"295"},"Update the dependencies array to be: [count, errors, props.contactProp, props.submitEvent]",{"range":"296","text":"297"},"removeEscape",{"range":"298","text":"299"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"300","text":"301"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[1874,1893],"[count, errors, props?.data?.class_benefits, props?.data?.insurance_class, props.submitEvent]",[6460,6489],"[formValues, props, segment, types_of_insurance]",[3869,3888],"[count, errors, props.data, props.submitEvent]",[1646,1665],"[count, inputData, props.siibPercentageData, props.submitEvent]",[3914,3916],"[props?.insuranceInputs]",[2407,2426],"[count, errors, props.contactProp, props.submitEvent]",[8893,8894],"",[8893,8893],"\\"]